<h1>{{username}}</h1>

<p>{{email}}</p>
{{!-- 
Este formulario lo que hace es una llamada POST a la ruta localhost:3000/user/:idUser.
Recordamos que :idUser puede ser cualquier valor. 

Se ejecuta el router que se encuentra en el archivo routes/user.routes.js:

router.post('/:userId', (req, res, next) => {
  const { username, email } = req.body;
  UserModel.findByIdAndUpdate(req.params.userId, { username, email })
    .then((user) => {
      res.redirect(`/user/${user._id}`);
    })
    .catch((err) => next(err));
});

 --}}
<form action="/user/{{_id}}" method="post">
  <label for="">Username</label>
  <input type="text" name="username" value="{{username}}">
  <label for="">Email</label>
  <input type="text" name="email" value="{{email}}">

  <button type="submit">Update</button>
</form>
{{!-- 
  Realizamos una llamada GET para acceder a la ruta localhost:3000/user/delete/:idUser

  Se ejecuta el router que se encuentra en el archivo routes/user.routes.js:

  router.get('/delete/:idUser', (req, res, next) => {
  UserModel.findByIdAndDelete(req.params.idUser)
  .then(() => {
    res.redirect('/');
  })
  .catch(err => next(err));
  });

 --}}
<a href="/user/delete/{{_id}}">DELETE O.O</a>
<br />

{{!-- 
  Realizamos una llamada GET para acceder a la ruta localhost:3000/post/create/:idUser

  Se ejecuta el router que se encuentra en el archivo routes/post.routes.js:

 router.get('/:userId', (req, res, next) => {
  console.log(req.params);
  UserModel.findById(req.params.userId)
    .then((user) => {
      if (user) {
        res.render('user/user_id', user);
      } else {
        res.render('not-found');
      }
    })
    .catch((err) => {
      next(err);
    });
});


 --}}

<a href="/post/create/{{_id}}">Create Post</a>